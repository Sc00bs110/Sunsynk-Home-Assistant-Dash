type: custom:layout-card
layout_type: custom:grid-layout
cards:
  - type: custom:sunsynk-power-flow-card
    view_layout:
      grid-area: flow
    cardstyle: lite
    large_font: true
    show_solar: true
    panel_mode: true
    card_height: 415px
    inverter:
      modern: true
      colour: '#959595'
      autarky: power
    solar:
      mppts: 2
      show_daily: true
      colour: '#F4C430'
      animation_speed: 9
      max_power: 6600
      pv1_name: West
      pv2_name: North
      display_mode: 2
      auto_scale: true
    battery:
      energy: 15960
      shutdown_soc: sensor.sunsynk_battery_capacity_shutdown
      show_daily: true
      colour: pink
      animation_speed: 6
      max_power: 4100
      auto_scale: true
    load:
      show_aux: false
      show_daily: true
      animation_speed: 8
      max_power: 8000
      additional_loads: 2
      load1_name: Geyser
      load1_icon: mdi:water-boiler
      load2_name: Pool
      load2_icon: mdi:pool
      auto_scale: true
    grid:
      show_daily_buy: true
      no_grid_colour: '#BE87E2'
      animation_speed: 8
      max_power: 8000
      auto_scale: true
      export_colour: maroon
    entities:
      use_timer_248: switch.sunsynk_toggle_system_timer
      priority_load_243: switch.sunsynk_toggle_priority_load
      day_battery_charge_70: sensor.sunsynk_day_battery_charge
      day_battery_discharge_71: sensor.sunsynk_day_battery_discharge
      day_load_energy_84: sensor.sunsynk_day_load_energy
      day_grid_import_76: sensor.sunsynk_day_grid_import
      day_grid_export_77: none
      day_pv_energy_108: sensor.sunsynk_day_pv_energy
      inverter_voltage_154: sensor.sunsynk_inverter_voltage
      load_frequency_192: sensor.sunsynk_load_frequency
      inverter_current_164: sensor.sunsynk_inverter_current
      inverter_power_175: sensor.sunsynk_inverter_power
      grid_power_169: sensor.sunsynk_grid_power
      pv1_power_186: sensor.sunsynk_pv1_power
      pv2_power_187: sensor.sunsynk_pv2_power
      pv3_power_188: none
      pv4_power_189: none
      battery_voltage_183: sensor.sunsynk_battery_voltage
      battery_soc_184: sensor.sunsynk_battery_soc
      battery_power_190: sensor.sunsynk_battery_power
      battery_current_191: sensor.sunsynk_battery_current
      essential_power: sensor.sunsynk_essential_power_1
      essential_load1: sensor.tuya_geyser_current_consumption
      essential_load2: sensor.sonoff_10013bda3a_power
      nonessential_power: sensor.sunsynk_nonessential_power_1
      grid_ct_power_172: sensor.sunsynk_grid_ct_power
      pv1_voltage_109: sensor.sunsynk_pv1_voltage
      pv1_current_110: sensor.sunsynk_pv1_current
      pv2_voltage_111: sensor.sunsynk_pv2_voltage
      pv2_current_112: sensor.sunsynk_pv2_current
      grid_connected_status_194: binary_sensor.sunsynk_grid_connected_status
      inverter_status_59: sensor.sunsynk_overall_state
      aux_power_166: sensor.sunsynk_aux_power
      remaining_solar: sensor.solcast_pv_forecast_forecast_remaining_today
      battery_temp_182: sensor.sunsynk_battery_temperature
      radiator_temp_91: sensor.sunsynk_radiator_temperature
      dc_transformer_temp_90: sensor.sunsynk_dc_transformer_temperature
      prog1_time: sensor.sunsynk_time_slot_1
      prog1_capacity: number.sunsynk_prog1_capacity
      prog1_charge: switch.sunsynk_prog1_grid_charge
      prog2_time: sensor.sunsynk_time_slot_2
      prog2_capacity: number.sunsynk_prog2_capacity
      prog2_charge: switch.sunsynk_prog2_grid_charge
      prog3_time: sensor.sunsynk_time_slot_3
      prog3_capacity: number.sunsynk_prog3_capacity
      prog3_charge: switch.sunsynk_prog3_grid_charge
      prog4_time: sensor.sunsynk_time_slot_4
      prog4_capacity: number.sunsynk_prog4_capacity
      prog4_charge: switch.sunsynk_prog4_grid_charge
      prog5_time: sensor.sunsynk_time_slot_5
      prog5_capacity: number.sunsynk_prog5_capacity
      prog5_charge: switch.sunsynk_prog5_grid_charge
      prog6_time: sensor.sunsynk_time_slot_6
      prog6_capacity: number.sunsynk_prog6_capacity
      prog6_charge: switch.sunsynk_prog6_grid_charge
      essential_load1_extra: sensor.daily_geyser_energy
      essential_load2_extra: sensor.pool_temperature
  - type: custom:plotly-graph
    view_layout:
      grid-area: graph
    entities:
      - entity: sensor.sunsynk_solar_power
        name: |
          $fn ({ ys,meta }) =>
            "Solar" + "🔆" + "(" +ys[ys.length - 1]+"W)"
        fill: tozeroy
        line:
          color: rgb(255, 155, 48)
          shape: spline
      - entity: sensor.sunsynk_essential_power
        name: |
          $fn ({ ys,meta }) =>
            "Load" + "⚡" + "(" +ys[ys.length - 1]+"W)"
        fill: tozeroy
        line:
          color: rgb(95, 182, 173)
          shape: spline
      - entity: sensor.sunsynk_grid_ct_power
        name: |
          $fn ({ ys,meta }) =>
            "Grid" + "💡" + "(" +ys[ys.length - 1]+"W)"
        fill: tozeroy
        line:
          color: rgb(84, 144, 194)
          shape: spline
      - entity: sensor.sunsynk_battery_power
        fill: tozeroy
        name: |
          $fn ({ ys,meta }) =>
            "Battery" + "🔋" + "(" +ys[ys.length - 1]+"W)"
        line:
          color: rgb(243, 179, 202)
          shape: spline
      - entity: sensor.sunsynk_battery_soc
        name: |
          $fn ({ ys,meta }) =>
            "SOC" + "⚠️" + "(" +ys[ys.length - 1]+"%)"
        yaxis: y2
        line:
          color: red
          width: 1
          shape: spline
        fill: none
        filters:
          - sliding_window_moving_average:
              window_size: 1
              extended: true
    hours_to_show: 24
    refresh_interval: 60
    title: null
    defaults:
      entity:
        show_value: false
      yaxes:
        fixedrange: true
    layout:
      legend:
        bgcolor: rgba(0,0,0,0)
        itemsizing: constant
        font:
          size: 11
      yaxis2:
        range:
          - 20
          - 105
        fixedrange: true
      yaxis:
        tickmode: linear
        dtick: 1000
    config:
      scrollZoom: false
  - type: custom:plotly-graph
    view_layout:
      grid-area: daily
    entities:
      - entity: sensor.sunsynk_day_pv_energy
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Solar" + "🔆" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        texttemplate: '%{y}'
        filters:
          - filter: i>0
        marker:
          color: rgb(255, 155, 48)
      - entity: sensor.sunsynk_day_load_energy
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Load" + "⚡" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        filters:
          - filter: i>0
        texttemplate: '%{y}'
        marker:
          color: rgb(95, 182, 173)
      - entity: sensor.sunsynk_day_grid_import
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Grid Import" + "💡" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        texttemplate: '%{y}'
        filters:
          - filter: i>0
        marker:
          color: rgb(84, 144, 194)
      - entity: sensor.sunsynk_day_battery_discharge
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Battery Discharge" + "🖱️" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        texttemplate: '%{y}'
        filters:
          - filter: i>0
        marker:
          color: rgb(151, 90, 182)
      - entity: sensor.sunsynk_day_battery_charge
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Battery Charge" + "🔋" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        texttemplate: '%{y}'
        filters:
          - filter: i>0
        marker:
          color: yellow
    hours_to_show: 5d
    title: null
    refresh_interval: 120
    defaults:
      yaxes:
        fixedrange: true
    layout:
      legend:
        bgcolor: rgba(0,0,0,0)
        itemsizing: constant
        font:
          size: 11
      height: 410
    config:
      displayModeBar: false
      scrollZoom: false
    time_offset: 12h
  - type: custom:apexcharts-card
    view_layout:
      grid-area: solar
    header:
      show: true
      standard_format: true
      show_states: true
      colorize_states: true
    apex_config:
      chart:
        height: 350px
      tooltip:
        enabled: true
        shared: true
        followCursor: true
    graph_span: 4d
    now:
      show: true
      label: Now
    span:
      start: day
      offset: '-1day'
    all_series_config:
      type: area
      opacity: 0.3
      stroke_width: 1
    series:
      - entity: sensor.sunsynk_battery_soc
        name: Battery
        float_precision: 0
        type: line
        color: '#f06292'
        opacity: 0.6
        yaxis_id: capacity
        extend_to: now
        show:
          legend_value: true
          in_header: false
        group_by:
          func: last
          duration: 5m
      - entity: sensor.sunsynk_solar_power
        name: Solar Power
        float_precision: 3
        color: '#ff9800'
        yaxis_id: kWh
        unit: kW
        transform: return x/1000;
        extend_to: now
        show:
          legend_value: true
          in_header: false
        group_by:
          func: avg
          duration: 5m
      - entity: sensor.solcast_pv_forecast_forecast_today
        name: Solar Forecast (D1)
        extend_to: false
        color: grey
        opacity: 0.3
        stroke_width: 0
        yaxis_id: kWh
        show:
          legend_value: false
          in_header: false
        data_generator: |
          return entity.attributes.detailedForecast.map((entry) => {
                return [new Date(entry.period_start), entry.pv_estimate];
              });
      - entity: sensor.solcast_pv_forecast_forecast_tomorrow
        name: Solar Forecast (D2)
        float_precision: 3
        extend_to: false
        color: grey
        opacity: 0.3
        stroke_width: 0
        yaxis_id: kWh
        show:
          legend_value: false
          in_header: false
        data_generator: |
          return entity.attributes.detailedForecast.map((entry) => {
                return [new Date(entry.period_start), entry.pv_estimate];
              });
      - entity: sensor.solcast_pv_forecast_forecast_day_3
        name: Solar Forecast (D3)
        float_precision: 3
        extend_to: false
        color: grey
        opacity: 0.3
        stroke_width: 0
        yaxis_id: kWh
        show:
          legend_value: false
          in_header: false
        data_generator: |
          return entity.attributes.detailedForecast.map((entry) => {
                return [new Date(entry.period_start), entry.pv_estimate];
              });
      - entity: sensor.solcast_pv_forecast_forecast_today
        yaxis_id: header_only
        name: Solar Forecast (D1)
        color: grey
        show:
          legend_value: true
          in_header: true
          in_chart: false
      - entity: sensor.solcast_pv_forecast_forecast_remaining_today
        yaxis_id: header_only
        name: Forecast (D1 Remaining)
        color: grey
        show:
          legend_value: true
          in_header: true
          in_chart: false
      - entity: sensor.solcast_pv_forecast_forecast_tomorrow
        yaxis_id: header_only
        name: Forecast (D2)
        color: grey
        show:
          legend_value: true
          in_header: true
          in_chart: false
      - entity: sensor.solcast_pv_forecast_forecast_day_3
        yaxis_id: header_only
        name: Solar Forecast (D3)
        color: grey
        show:
          legend_value: true
          in_header: true
          in_chart: false
      - entity: sensor.solcast_pv_forecast_api_last_polled
        yaxis_id: header_only
        name: Forecast (Last Update)
        color: grey
        unit: ' min.'
        transform: return ((Date.now()) - (new Date(x).getTime())) / 60 / 60 / 24
        show:
          legend_value: true
          in_header: true
          in_chart: false
    yaxis:
      - id: capacity
        show: true
        opposite: true
        decimals: 0
        max: 100
        min: 0
        apex_config:
          tickAmount: 5
      - id: kWh
        show: true
        min: 0
        apex_config:
          tickAmount: 5
      - id: header_only
        show: false
  - type: custom:plotly-graph
    view_layout:
      grid-area: total
    entities:
      - entity: sensor.sunsynk_total_pv_energy
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Solar" + "🔆" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        width: $fn() => 1000*60*60*3
        offset: $fn() => 1000*60*60*4.5
        texttemplate: '%{y}'
        filters:
          - filter: i>0
          - force_numeric
        marker:
          color: rgb(255, 155, 48)
      - entity: sensor.sunsynk_total_load_energy
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Load" + "⚡" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        width: $fn() => 1000*60*60*3
        offset: $fn() => 1000*60*60*7.5
        filters:
          - filter: i>0
          - force_numeric
        texttemplate: '%{y}'
        marker:
          color: rgb(95, 182, 173)
      - entity: sensor.sunsynk_total_grid_import
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Grid Import" + "💡" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        width: $fn() => 1000*60*60*3
        offset: $fn() => 1000*60*60*10.5
        texttemplate: '%{y}'
        filters:
          - filter: i>0
          - force_numeric
        marker:
          color: rgb(84, 144, 194)
      - entity: sensor.sunsynk_total_battery_discharge
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Bat Discharge" + "🖱️" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        width: $fn() => 1000*60*60*3
        offset: $fn() => 1000*60*60*13.5
        texttemplate: '%{y}'
        filters:
          - filter: i>0
          - force_numeric
        marker:
          color: rgb(151, 90, 182)
      - entity: sensor.sunsynk_total_battery_charge
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Bat Charge" + "🔋" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        width: $fn() => 1000*60*60*3
        offset: $fn() => 1000*60*60*16.5
        texttemplate: '%{y}'
        filters:
          - filter: i>0
          - force_numeric
        marker:
          color: yellow
    hours_to_show: current_day
    defaults:
      entity:
        line:
          width: 2
      yaxes:
        fixedrange: true
    title: null
    layout:
      barmode: group
      xaxis:
        nticks: 1
      height: 410
    time_offset: '-1m'
    config:
      displayModeBar: false
      scrollZoom: false
  - type: custom:apexcharts-card
    view_layout:
      grid-area: stats
    chart_type: donut
    header:
      show: true
      title: Generation Purpose
      show_states: true
      colorize_states: true
    apex_config:
      chart:
        toolbar:
          show: false
          autoSelected: zoom
      stroke:
        width: 1
        curve: smooth
      legend:
        show: false
      responsive:
        - breakpoint: 800
          options:
            chart:
              height: 360px
        - breakpoint: 1300
          options:
            chart:
              height: 360px
        - breakpoint: 10000
          options:
            chart:
              height: 355px
    series:
      - entity: sensor.sunsynk_day_load_energy
        name: Consumption
      - entity: sensor.sunsynk_day_battery_charge
        name: Charging
  - type: custom:apexcharts-card
    view_layout:
      grid-area: stats1
    chart_type: donut
    header:
      show: true
      title: Generation Today
      show_states: true
      colorize_states: true
    apex_config:
      chart:
        toolbar:
          show: false
          autoSelected: zoom
      stroke:
        width: 1
        curve: smooth
      legend:
        show: false
      responsive:
        - breakpoint: 800
          options:
            chart:
              height: 360px
        - breakpoint: 1300
          options:
            chart:
              height: 360px
        - breakpoint: 10000
          options:
            chart:
              height: 375px
    series:
      - entity: sensor.sunsynk_day_pv_energy
        name: Solar
        color: rgb(255, 155, 48)
      - entity: sensor.sunsynk_day_battery_discharge
        name: Battery
        color: rgb(151, 90, 182)
      - entity: sensor.sunsynk_day_grid_import
        name: Grid
        color: rgb(84, 144, 194)
  - type: vertical-stack
    cards:
      - type: custom:plotly-graph
        entities:
          - entity: sensor.sonoff_10013bda3a_energy
            statistic: state
            name: Daily Energy
            period: day
            type: bar
            texttemplate: '%{y}'
            filters:
              - filter: i>0
        hours_to_show: 7d
        defaults:
          entity:
            line:
              width: 2
          yaxes:
            fixedrange: true
        title: Daily Pool Energy
        layout:
          xaxis:
            rangeselector:
              'y': 1.05
              buttons:
                - count: 7
                  step: day
                - count: 30
                  step: day
                - count: 90
                  step: day
        config:
          displayModeBar: false
          scrollZoom: false
      - type: entities
        entities:
          - entity: switch.sonoff_10013bda3a
            name: Pool pump
          - entity: sensor.sonoff_10013bda3a_current
            icon: mdi:current-ac
            name: Current
          - entity: sensor.sonoff_10013bda3a_power
            icon: mdi:lightning-bolt
            name: Power
    view_layout:
      grid-area: bat
  - type: vertical-stack
    cards:
      - type: custom:plotly-graph
        entities:
          - entity: sensor.daily_geyser_energy
            statistic: state
            name: Daily Energy
            period: day
            type: bar
            texttemplate: '%{y}'
            filters:
              - filter: i>0
        hours_to_show: 7d
        defaults:
          entity:
            line:
              width: 2
          yaxes:
            fixedrange: true
        title: Daily Geyser Energy
        layout:
          xaxis:
            rangeselector:
              'y': 1.05
              buttons:
                - count: 7
                  step: day
                - count: 30
                  step: day
                - count: 90
                  step: day
        config:
          displayModeBar: false
          scrollZoom: false
      - type: entities
        entities:
          - entity: switch.geyser
          - entity: sensor.tuya_geyser_current
            icon: mdi:current-ac
            name: Current
          - entity: sensor.tuya_geyser_current_consumption
            icon: mdi:lightning-bolt
            name: Power
    view_layout:
      grid-area: geyser
  - type: markdown
    content: "  ## System Timer Settings\n<table width=\"100%\"  border=0>\n  <tbody> \n  <tr>\n    <td align=\"left\">\n    <b>Time Slot</b>\n    </td>\n    <td align=\"left\">\n    <b>Battery SOC</b>\n    </td>\n    <td align=\"left\">\n\t<b>Grid</b>\n\t</td>\n  </tr>\n  <tr>\n    <td align=\"left\">\n    {{states('sensor.sunsynk_time_slot_1')}} - {{states('sensor.sunsynk_time_slot_2')}}\n    </td>\n    <td align=\"left\">\n    {{ states('number.sunsynk_prog1_capacity') | round(0) }} %\n    </td>\n    <td align=\"left\">\n\t{% if is_state('switch.sunsynk_prog1_grid_charge', 'on') %} <ha-icon icon=\"mdi:checkbox-marked-outline\"></ha-icon> {% else %} <ha-icon icon=\"mdi:checkbox-blank-outline\"></ha-icon> {% endif %}\n\t</td>\n  </tr>\n  <tr>\n    <td align=\"left\">\n    {{states('sensor.sunsynk_time_slot_2')}} - {{states('sensor.sunsynk_time_slot_3')}}\n    </td>\n    <td align=\"left\">\n    {{ states('number.sunsynk_prog2_capacity') | round(0) }} %\n    </td>\n    <td align=\"left\">\n\t{% if is_state('switch.sunsynk_prog2_grid_charge', 'on') %} <ha-icon icon=\"mdi:checkbox-marked-outline\"></ha-icon> {% else %} <ha-icon icon=\"mdi:checkbox-blank-outline\"></ha-icon> {% endif %}\n\t</td>\n  </tr>\n  <tr>\n    <td align=\"left\">\n    {{states('sensor.sunsynk_time_slot_3')}} - {{states('sensor.sunsynk_time_slot_4')}}\n    </td>\n    <td align=\"left\">\n    {{ states('number.sunsynk_prog3_capacity') | round(0) }} %\n    </td>\n    <td align=\"left\">\n\t{% if is_state('switch.sunsynk_prog3_grid_charge', 'on') %} <ha-icon icon=\"mdi:checkbox-marked-outline\"></ha-icon> {% else %} <ha-icon icon=\"mdi:checkbox-blank-outline\"></ha-icon> {% endif %}\n\t</td>\n  </tr>\n  <tr>\n    <td align=\"left\">\n    {{states('sensor.sunsynk_time_slot_4')}} - {{states('sensor.sunsynk_time_slot_5')}}\n    </td>\n    <td align=\"left\">\n    {{ states('number.sunsynk_prog4_capacity') | round(0) }} %\n    </td>\n    <td align=\"left\">\n\t{% if is_state('switch.sunsynk_prog4_grid_charge', 'on') %} <ha-icon icon=\"mdi:checkbox-marked-outline\"></ha-icon> {% else %} <ha-icon icon=\"mdi:checkbox-blank-outline\"></ha-icon> {% endif %}\n\t</td>\n  </tr>\n  <tr>\n    <td align=\"left\">\n    {{states('sensor.sunsynk_time_slot_5')}} - {{states('sensor.sunsynk_time_slot_6')}}\n    </td>\n    <td align=\"left\">\n    {{ states('number.sunsynk_prog5_capacity') | round(0) }} %\n    </td>\n    <td align=\"left\">\n\t{% if is_state('switch.sunsynk_prog5_grid_charge', 'on') %} <ha-icon icon=\"mdi:checkbox-marked-outline\"></ha-icon> {% else %} <ha-icon icon=\"mdi:checkbox-blank-outline\"></ha-icon> {% endif %}\n\t</td>\n  </tr>\n  <tr>\n    <td align=\"left\">\n    {{states('sensor.sunsynk_time_slot_6')}} - {{states('sensor.sunsynk_time_slot_1')}}\n    </td>\n    <td align=\"left\">\n    {{ states('number.sunsynk_prog6_capacity') | round(0) }} %\n    </td>\n    <td align=\"left\">\n\t{% if is_state('switch.sunsynk_prog6_grid_charge', 'on') %} <ha-icon icon=\"mdi:checkbox-marked-outline\"></ha-icon> {% else %} <ha-icon icon=\"mdi:checkbox-blank-outline\"></ha-icon> {% endif %}\n\t</td>\n  </tr>\n  </tbody>\n</table>"
    view_layout:
      grid-area: weather
  - type: custom:flex-horseshoe-card
    view_layout:
      grid-area: g2
    entities:
      - entity: sensor.sunsynk_battery_soc
        decimals: 0
        unit: '%'
        name: BATTERY
      - entity: sensor.sunsynk_battery_voltage
        decimals: 2
        unit: V
      - entity: sensor.sunsynk_battery_current
        decimals: 2
        unit: A
      - entity: sensor.sunsynk_battery_power
        decimals: 0
        unit: W
      - entity: sensor.sunsynk_day_battery_discharge
        decimals: 2
        unit: kWh
        name: Discharge
      - entity: sensor.sunsynk_day_battery_charge
        decimals: 2
        unit: kWh
        name: Charge
    show:
      horseshoe_style: autominmax
    layout:
      hlines:
        - id: 0
          xpos: 50
          ypos: 40
          length: 70
          styles:
            - opacity: 0.2;
        - id: 0
          xpos: 50
          ypos: 60
          length: 70
          styles:
            - opacity: 0.2;
      vlines:
        - id: 0
          xpos: 50
          ypos: 50
          length: 18
          styles:
            - opacity: 0.2;
      states:
        - id: 0
          entity_index: 0
          xpos: 50
          ypos: 33
          styles:
            - font-size: 3em;
            - opacity: 0.9;
        - id: 1
          entity_index: 1
          xpos: 44
          ypos: 53
          styles:
            - font-size: 1.5em;
            - text-anchor: end;
        - id: 2
          entity_index: 2
          xpos: 55
          ypos: 53
          styles:
            - text-anchor: start;
            - font-size: 1.5em;
        - id: 3
          entity_index: 3
          xpos: 34
          ypos: 75
          styles:
            - text-anchor: start;
            - font-size: 2em;
        - id: 4
          entity_index: 4
          xpos: 76
          ypos: 7
          styles:
            - text-anchor: start;
            - font-size: 1.2em;
        - id: 5
          entity_index: 5
          xpos: 0
          ypos: 7
          styles:
            - text-anchor: start;
            - font-size: 1.2em;
      icons:
        - id: 0
          entity_index: 1
          xpos: 30
          ypos: 52
          align: start
          size: 1
      names:
        - id: 0
          entity_index: 0
          xpos: 50
          ypos: 95
          styles:
            - font-size: 1.2em;
        - id: 1
          entity_index: 4
          xpos: 81
          ypos: 12
          styles:
            - font-size: 0.5em;
            - text-anchor: start;
        - id: 2
          entity_index: 5
          xpos: 0
          ypos: 12
          styles:
            - font-size: 0.5em;
            - text-anchor: start;
    horseshoe_scale:
      min: 0
      max: 100
      width: 6
    color_stops:
      '0': pink
      '2000': pink
    card_mod:
      style: |
        ha-card {
          --ha-card-background: var(--card-background-color);
          color: var(--primary-color);
        }
  - type: custom:flex-horseshoe-card
    view_layout:
      grid-area: g3
    entities:
      - entity: sensor.sunsynk_essential_power_1
        unit: W
        name: AC
      - entity: sensor.sunsynk_inverter_voltage
        decimals: 0
        unit: V
      - entity: sensor.sunsynk_grid_frequency
        decimals: 2
        unit: Hz
        name: Grid
      - entity: sensor.sunsynk_grid_ct_power
        decimals: 0
        unit: W
        name: Grid
      - entity: sensor.sunsynk_day_grid_import
        decimals: 2
        unit: kWh
        name: Import
      - entity: sensor.sunsynk_day_load_energy
        decimals: 2
        unit: kWh
        name: Daily
    show:
      horseshoe_style: autominmax
    layout:
      hlines:
        - id: 0
          xpos: 50
          ypos: 40
          length: 70
          styles:
            - opacity: 0.2;
        - id: 0
          xpos: 50
          ypos: 60
          length: 70
          styles:
            - opacity: 0.2;
      vlines:
        - id: 0
          xpos: 50
          ypos: 50
          length: 18
          styles:
            - opacity: 0.2;
      states:
        - id: 0
          entity_index: 0
          xpos: 50
          ypos: 33
          styles:
            - font-size: 3em;
            - opacity: 0.9;
        - id: 1
          entity_index: 1
          xpos: 44
          ypos: 53
          styles:
            - font-size: 1.5em;
            - text-anchor: end;
        - id: 2
          entity_index: 2
          xpos: 55
          ypos: 53
          styles:
            - text-anchor: start;
            - font-size: 1.5em;
        - id: 3
          entity_index: 3
          xpos: 34
          ypos: 75
          styles:
            - text-anchor: start;
            - font-size: 2em;
        - id: 4
          entity_index: 4
          xpos: 75
          ypos: 7
          styles:
            - text-anchor: start;
            - font-size: 1.2em;
        - id: 5
          entity_index: 5
          xpos: 0
          ypos: 7
          styles:
            - text-anchor: start;
            - font-size: 1.2em;
      icons:
        - id: 0
          entity_index: 1
          xpos: 30
          ypos: 52
          align: start
          size: 1
      names:
        - id: 0
          entity_index: 0
          xpos: 50
          ypos: 95
          styles:
            - font-size: 1.2em;
        - id: 1
          entity_index: 4
          xpos: 85
          ypos: 12
          styles:
            - font-size: 0.5em;
            - text-anchor: start;
        - id: 2
          entity_index: 5
          xpos: 0
          ypos: 12
          styles:
            - font-size: 0.5em;
            - text-anchor: start;
        - id: 3
          entity_index: 3
          xpos: 44
          ypos: 80
          styles:
            - font-size: 0.5em;
            - text-anchor: start;
    horseshoe_scale:
      min: 0
      max: 8000
      width: 6
    color_stops:
      '0': '#5fb6ad'
      '2000': '#5fb6ad'
    card_mod:
      style: |
        ha-card {
          --ha-card-background: var(--card-background-color);
          color: var(--primary-color); 
        }
  - type: markdown
    content: >-
      {% set stage_sensor = "sensor.load_shedding_stage_eskom" %} {% set
      area_sensor =
      "sensor.load_shedding_area_jhbcitypower3_10_noordhangext49505154586778" %}
      {% set area_schedule = state_attr(area_sensor, "forecast") %} {% if
      area_schedule %}
        {% set start_time = area_schedule[0].start_time %}
        {% set end_time = area_schedule[0].end_time %}
        {% if is_state(area_sensor, "off") %}
          {% set starts_in = timedelta(minutes=state_attr(area_sensor, "starts_in")).total_seconds() | int // 60 %}
          {% set mins = starts_in % 60 %}
          {% set hrs = starts_in // 60 % 24 %}
          {% set days = starts_in // 1440 %}
          {% set alert = "Load Shedding starts in {d}d {h}h {m}m ({next})".format(d=days, m=mins, h=hrs, next=as_timestamp(start_time) | timestamp_custom("%H:%M", True)) %}
          {% if starts_in > 1440 %}
            <ha-alert alert-type="success">{{ states(stage_sensor) }}</ha-alert>
          {% elif 60 < starts_in <= 1440 %}
            <ha-alert alert-type="warning">{{ alert }}</ha-alert>
          {% else %}
            <ha-alert alert-type="error">{{ alert }}</ha-alert>
          {% endif %}
        {% else %}
          {% set ends_in = timedelta(minutes=state_attr(area_sensor, "ends_in")).total_seconds() | int // 60 %}
            {% set mins = ends_in % 60 %}
            {% set hrs = ends_in // 60 % 24 %}
            {% set days = ends_in // 1440 %}
            {% set alert = "Load Shedding ends in {d}d {h}h {m}m ({next})".format(d=days, m=mins, h=hrs, next=as_timestamp(end_time) | timestamp_custom("%H:%M", True)) %}
            <ha-alert alert-type="error">{{ alert }}</ha-alert>
        {% endif %}
      {% else %}
        {% set stage = state_attr(stage_sensor, "next_stage") %}
        {% set start_time = state_attr(stage_sensor, "next_start_time") %}
        {% set end_time = state_attr(stage_sensor, "next_end_time") %}
        {% set starts_in = timedelta(minutes=state_attr(stage_sensor, "starts_in")).total_seconds() | int // 60 %}
        {% set mins = starts_in % 60 %}
        {% set hrs = starts_in // 60 % 24 %}
        {% set days = starts_in // 1440 %}
        {% if (start_time == 0 or end_time == 0) %}
        {% set alert = "No Load Shedding" %}
        {% else %}
        {% set alert = "Stage {stage} starts in {d}d {h}h {m}m ({next})".format(stage=stage, d=days, m=mins, h=hrs, next=as_timestamp(start_time) | timestamp_custom("%H:%M", True)) %}
        {% endif %}
        <ha-alert alert-type="success">{{ alert }}</ha-alert>
      {% endif %}{% set area_forecast = state_attr(area_sensor, "forecast" )%}
      {% if area_forecast %} <table width="100%"  border=0>
        <tbody>
        {% for forecast in area_forecast[:3] %}
        <tr>
          <td align="left">
          {{ as_timestamp(forecast.start_time) | timestamp_custom("%-d %B", True) }}
          </td>
          <td align="left">
          {{ as_timestamp(forecast.start_time) | timestamp_custom("%H:%M", True) }} - {{ as_timestamp(forecast.end_time) | timestamp_custom("%H:%M", True) }}
          </td>
          <td align="right">{{ forecast.stage }}</td>
        </tr>
        {% endfor %}
        </tbody>
      </table> {% endif %}


      {% set soc1 = states('sensor.soc_battery_time_left_friendly') %}

      {% set load1 = states('sensor.sunsynk_load_power') %}

      {% set socsec1 = states('sensor.soc_battery_time_left') | int %}

      {% set state = states('sensor.sunsynk_battery_power') | int %}

      {% if state <= 0 -%}
        <ha-alert alert-type="success">{{ soc1 }} to {{states('sensor.markdown_battery_charge_time_left')}}%</ha-alert>
      {% else %}
        {% if socsec1 > 21601 %}
        <ha-alert alert-type="success"> Battery runtime to {{states('sensor.battery_cap')}}% is {{ soc1 }} at current ({{state}} W) battery load. ETA@{{states('sensor.markdown_discharge_time')}}</ha-alert>
        {% elif 10800 < socsec1 <= 21600 %}
        <ha-alert alert-type="warning">Battery runtime to {{states('sensor.battery_cap')}}% is {{ soc1 }} at current ({{state}} W) battery load. ETA@{{states('sensor.markdown_discharge_time')}}</ha-alert>     
        {% elif socsec1 <= 10800 %}
        <ha-alert alert-type="error"> Battery runtime to {{states('sensor.battery_cap')}}% is {{ soc1 }} at current ({{state}} W) battery load. ETA@{{states('sensor.markdown_discharge_time')}}</ha-alert>
        {% endif %}
      {% endif %}
    view_layout:
      grid-area: ls
  - type: custom:plotly-graph
    view_layout:
      grid-area: sg
    entities:
      - entity: sensor.sunsynk_day_pv_energy
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Solar" + "🔆" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        texttemplate: '%{y}'
        filters:
          - filter: i>0
        marker:
          color: rgb(255, 155, 48)
      - entity: sensor.sunsynk_day_grid_import
        statistic: state
        name: |
          $fn ({ ys,meta }) =>
            "Grid Import" + "💡" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: bar
        texttemplate: '%{y}'
        filters:
          - filter: i>0
        marker:
          color: rgb(84, 144, 194)
      - entity: sensor.sunsynk_day_load_energy
        statistic: state
        show_value: true
        name: |
          $fn ({ ys,meta }) =>
            "Load" + "⚡" + "(" +ys[ys.length - 1]+"kWh)"
        period: day
        type: line
        texttemplate: '%{y}'
        line:
          color: rgb(95, 182, 173)
          width: 2
    hours_to_show: 31d
    title: null
    refresh_interval: 600
    defaults:
      yaxes:
        fixedrange: true
    layout:
      legend:
        bgcolor: rgba(0,0,0,0)
        itemsizing: constant
        font:
          size: 11
        x: 0.4
      height: 410
      barmode: stack
      xaxis:
        rangeselector:
          'y': 1.05
          buttons:
            - count: 7
              step: day
            - count: 31
              step: day
            - count: 90
              step: day
    config:
      displayModeBar: false
      scrollZoom: false
  - type: custom:flex-horseshoe-card
    view_layout:
      grid-area: g1
    entities:
      - entity: sensor.sunsynk_solar_power
        decimals: 0
        unit: W
        name: Solar
      - entity: sensor.sunsynk_pv1_power
        decimals: 0
        unit: W
        name: PV1
      - entity: sensor.sunsynk_pv2_power
        decimals: 0
        unit: W
        name: PV2
      - entity: sensor.sunsynk_pv1_voltage
        decimals: 0
        unit: V
      - entity: sensor.sunsynk_pv2_voltage
        decimals: 0
        unit: V
      - entity: sensor.sunsynk_pv1_current
        decimals: 1
        unit: A
      - entity: sensor.sunsynk_pv2_current
        decimals: 1
        unit: A
      - entity: sensor.sunsynk_day_pv_energy
        decimals: 2
        unit: kWh
        name: Daily
      - entity: sensor.solcast_pv_forecast_forecast_remaining_today
        decimals: 2
        unit: kWh
        name: Left Today
    show:
      horseshoe_style: autominmax
    layout:
      hlines:
        - id: 0
          xpos: 50
          ypos: 40
          length: 70
          styles:
            - opacity: 0.2;
      vlines:
        - id: 0
          xpos: 50
          ypos: 59
          length: 36
          styles:
            - opacity: 0.2;
      states:
        - id: 0
          entity_index: 0
          xpos: 50
          ypos: 33
          styles:
            - font-size: 3em;
            - opacity: 0.9;
        - id: 1
          entity_index: 1
          xpos: 47
          ypos: 53
          styles:
            - font-size: 1.5em;
            - text-anchor: end;
        - id: 2
          entity_index: 2
          xpos: 53
          ypos: 53
          styles:
            - text-anchor: start;
            - font-size: 1.5em;
        - id: 3
          entity_index: 3
          xpos: 46
          ypos: 63
          styles:
            - text-anchor: end;
            - font-size: 1.5em;
        - id: 4
          entity_index: 4
          xpos: 53
          ypos: 63
          styles:
            - text-anchor: start;
            - font-size: 1.5em;
        - id: 5
          entity_index: 5
          xpos: 46
          ypos: 73
          styles:
            - text-anchor: end;
            - font-size: 1.5em;
        - id: 6
          entity_index: 6
          xpos: 53
          ypos: 73
          styles:
            - text-anchor: start;
            - font-size: 1.5em;
        - id: 7
          entity_index: 7
          xpos: 0
          ypos: 7
          styles:
            - text-anchor: start;
            - font-size: 1.2em;
        - id: 8
          entity_index: 8
          xpos: 75
          ypos: 7
          styles:
            - text-anchor: start;
            - font-size: 1.2em;
      icons:
        - id: 0
          entity_index: 1
          xpos: 1
          ypos: 53
          align: start
          size: 1
        - id: 1
          entity_index: 2
          xpos: 53
          ypos: 65
          align: end
          size: 0.5
      names:
        - id: 0
          entity_index: 0
          xpos: 50
          ypos: 95
          styles:
            - font-size: 1.2em;
        - id: 1
          entity_index: 1
          xpos: 15
          ypos: 45
          styles:
            - text-anchor: start;
            - font-size: 0.5em;
        - id: 2
          entity_index: 2
          xpos: 85
          ypos: 45
          styles:
            - text-anchor: end;
            - font-size: 0.5em;
        - id: 3
          entity_index: 7
          xpos: 0
          ypos: 12
          styles:
            - text-anchor: start;
            - font-size: 0.5em;
        - id: 4
          entity_index: 8
          xpos: 80
          ypos: 12
          styles:
            - font-size: 0.5em;
            - text-anchor: start;
    horseshoe_scale:
      min: 0
      max: 7000
      width: 6
    color_stops:
      '0': orange
      '2000': orange
    card_mod:
      style: |
        ha-card {
          --ha-card-background: var(--card-background-color);
          color: var(--primary-color); 
        }
  - type: custom:plotly-graph
    view_layout:
      grid-area: m
    entities:
      - entity: sensor.sunsynk_day_pv_energy
        statistic: sum
        name: |
          $fn ({ ys,meta }) =>
            "Solar" + "🔆"
        period: month
        type: bar
        width: $fn() => 1000*60*60*130
        offset: $fn() => -1000*60*60*325
        texttemplate: '%{y}'
        filters:
          - delta
        marker:
          color: rgb(255, 155, 48)
      - entity: sensor.sunsynk_day_load_energy
        statistic: sum
        name: |
          $fn ({ ys,meta }) =>
            "Load" + "⚡"
        period: month
        type: bar
        filters:
          - delta
        width: $fn() => 1000*60*60*130
        offset: $fn() => -1000*60*60*195
        texttemplate: '%{y}'
        marker:
          color: rgb(95, 182, 173)
      - entity: sensor.sunsynk_day_grid_import
        statistic: sum
        name: |
          $fn ({ ys,meta }) =>
            "Grid Import" + "💡"
        period: month
        type: bar
        texttemplate: '%{y}'
        width: $fn() => 1000*60*60*130
        filters:
          - delta
        marker:
          color: rgb(84, 144, 194)
      - entity: sensor.sunsynk_day_battery_discharge
        statistic: sum
        name: |
          $fn ({ ys,meta }) =>
            "Battery Discharge" + "🔋"
        period: month
        type: bar
        width: $fn() => 1000*60*60*130
        offset: $fn() => 1000*60*60*65
        texttemplate: '%{y}'
        filters:
          - delta
        marker:
          color: rgb(151, 90, 182)
      - entity: sensor.sunsynk_day_battery_charge
        statistic: sum
        name: |
          $fn ({ ys,meta }) =>
            "Battery Charge" + "🔋"
        period: month
        type: bar
        width: $fn() => 1000*60*60*130
        offset: $fn() => 1000*60*60*195
        texttemplate: '%{y}'
        filters:
          - delta
        marker:
          color: yellow
    hours_to_show: 6M
    title: Monthly Production
    refresh_interval: 600
    defaults:
      yaxes:
        fixedrange: true
    layout:
      legend:
        bgcolor: rgba(0,0,0,0)
        itemsizing: constant
        font:
          size: 11
      height: 410
    config:
      displayModeBar: false
      scrollZoom: false
    time_offset: 1M
  - type: energy-distribution
    view_layout:
      grid-area: energy
    link_dashboard: true
layout:
  grid-template-columns: 10% 10% 10% 10% 10% 10% 10% 10% 10% 10%
  grid-template-rows: auto 2fr auto auto auto auto auto
  grid-template-areas: |
    "g1 g1 g2 g2 g3 g3 ls ls weather weather"
    "flow flow flow flow graph graph graph graph graph graph "
    "total total total total daily daily daily daily daily daily"
    "sg sg sg sg sg sg sg sg stats stats"
    "m m m m m m m m stats1 stats1 "
    "bat bat bat bat bat geyser geyser geyser geyser geyser "
    "energy energy energy solar solar solar  solar solar  solar solar "
  justify-items: stretch
  mediaquery:
    '(max-width: 800px)':
      grid-template-columns: 100%
      grid-template-areas: |
        "ls"
        "g1"
        "g2"
        "g3"
        "flow"
        "graph"
        "daily"
        "total"
        "stats1"
        "sg"
        "m"
        "bat"
        "geyser"
        "stats"
        "energy"
        "solar"
        "weather"
    '(max-width: 1300px)':
      grid-template-columns: 33% 33% 33%
      grid-template-rows: auto
      grid-template-areas: |
        "g1 g2 g3"
        "flow flow flow "
        "graph graph graph"
        "stats1 daily daily"
        "stats total total"
        "sg sg sg"
        "m m m"
        "ls bat bat"
        "weather geyser geyser"
        "energy solar solar"
